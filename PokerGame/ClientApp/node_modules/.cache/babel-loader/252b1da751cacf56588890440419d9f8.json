{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Haley\\\\Desktop\\\\PokerGameReact\\\\PokerGame\\\\PokerGame\\\\ClientApp\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from 'react';\nexport class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [],\n      loading: true\n    };\n    this.counter = 0;\n  }\n\n  componentDidMount() {\n    this.populatePlayerData();\n  }\n\n  static renderPlayersTable(players) {\n    return /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table table-striped\",\n      \"aria-labelledby\": \"tabelLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 25\n      }\n    }, \"Player Name\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 25\n      }\n    }, \"Card 1\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 25\n      }\n    }, \"Card 2\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 25\n      }\n    }, \"Card 3\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }\n    }, \"Card 4\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }\n    }, \"Card 5\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }, players.map(player => /*#__PURE__*/React.createElement(\"tr\", {\n      key: player.playerName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 29\n      }\n    }, player.playerName), player.playerHand.cards.map(card => /*#__PURE__*/React.createElement(\"td\", {\n      key: card.cardNumberString + \" \" + card.cardSuitString,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 33\n      }\n    }, card.cardNumberString, \" \", card.cardSuitString))))));\n  }\n\n  render() {\n    let contents = this.state.loading ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 18\n      }\n    }, \"Loading...\")) : Home.renderPlayersF(this.state.players);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"tabelLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, \"Poker Game\"), contents, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.declareWinner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, \"Find Winner\"), \"\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.newGame.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, \"New Game\"));\n  }\n\n  async populatePlayerData() {\n    const response = await fetch('pokergame');\n    const data = await response.json();\n    this.setState({\n      players: data,\n      loading: false\n    });\n  }\n\n  async newGame() {\n    this.populatePlayerData();\n  }\n\n  async declareWinner() {\n    const response = await fetch('pokergame/getwinner');\n    const data = await response.text();\n    alert(data);\n  }\n\n}\nHome.displayName = Home.name;","map":{"version":3,"sources":["C:/Users/Haley/Desktop/PokerGameReact/PokerGame/PokerGame/ClientApp/src/components/Home.js"],"names":["React","Component","Home","constructor","props","state","players","loading","counter","componentDidMount","populatePlayerData","renderPlayersTable","map","player","playerName","playerHand","cards","card","cardNumberString","cardSuitString","render","contents","renderPlayersF","declareWinner","newGame","bind","response","fetch","data","json","setState","text","alert","displayName","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { players: [], loading: true };\r\n        this.counter = 0;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.populatePlayerData();\r\n    }\r\n       \r\n    static renderPlayersTable(players) {\r\n        return (\r\n            <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Player Name</th>\r\n                        <th>Card 1</th>\r\n                        <th>Card 2</th>\r\n                        <th>Card 3</th>\r\n                        <th>Card 4</th>\r\n                        <th>Card 5</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {players.map(player =>\r\n                        <tr key={player.playerName}>\r\n                            <td>{player.playerName}</td>\r\n                            {player.playerHand.cards.map(card =>\r\n                                <td key={card.cardNumberString + \" \" + card.cardSuitString}>{card.cardNumberString} {card.cardSuitString}</td>)}\r\n\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let contents = this.state.loading\r\n            ? <p><em>Loading...</em></p>\r\n            : Home.renderPlayersF(this.state.players);\r\n        return (\r\n            <div>\r\n                <h1 id=\"tabelLabel\" >Poker Game</h1>\r\n                {contents}\r\n                <button className=\"btn btn-primary\" onClick={this.declareWinner}>Find Winner</button>\r\n                &nbsp;&nbsp;\r\n                <button className=\"btn btn-primary\" onClick={this.newGame.bind(this)}>New Game</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    async populatePlayerData() {\r\n        const response = await fetch('pokergame');\r\n        const data = await response.json();\r\n        this.setState({ players: data, loading: false });\r\n    }\r\n\r\n    async newGame() {\r\n        this.populatePlayerData();\r\n    }\r\n\r\n    async declareWinner() {\r\n        const response = await fetch('pokergame/getwinner');\r\n        const data = await response.text();\r\n        alert(data);\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}